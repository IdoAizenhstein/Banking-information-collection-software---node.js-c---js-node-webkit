class meshulam {    constructor() {        this.cookies = "";        this.idxMonth = 0;        this.idxCards = 0;        this.eventVal = "";        this.param = "";        this.pathUrl = "";        this.logoutTime = 0;        this.arrOfCard = [];        this.monthOfCard = [];        this.arr = [];        this.slikaAccount = "";        this.business_title = "";    }    reqPost(...args) {        monitorActivityClass.setIntervalActivity();        let [url, Referer, cookie, body] = args;        writeLog("visaPost: " + url);        return new Promise((resolve, reject) => {            var options = {                uri: url,                family: 4,                timeout: 40000,                form: body,                method: "POST",                body: "POST",                json: false,                headers: {                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",                    "Host": "meshulam.co.il",                    "Origin": "https://meshulam.co.il",                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36'                }            };            if (cookie !== null) {                options.headers.Cookie = cookie;            }            if (Referer !== null) {                options.headers.Referer = Referer;            }            senderReq.sendersServer(options, (error, response, data) => {                if (response !== undefined && response.headers !== undefined && response.headers["set-cookie"]) {                    this.getSetCookies(response.headers["set-cookie"])                        .then((res) => {                            resolve([error, response, data]);                        });                } else {                    resolve([error, response, data]);                }            });        });    }    reqGet(...args) {        let [url, Referer, cookie] = args;        monitorActivityClass.setIntervalActivity();        writeLog("visaRestGet: " + url);        return new Promise((resolve, reject) => {            let options = {                "uri": url,                "family": 4,                "method": "GET",                "timeout": 40000,                "headers": {                    "Connection": "keep-alive",                    'upgrade-insecure-requests': "1",                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36'                }            }            if (cookie !== null) {                options.headers.Cookie = cookie;            }            if (Referer !== null) {                options.headers.Referer = Referer;            }            senderReq.sendersServer(options, (error, response, data) => {                // if (!error && response && response.headers["ETag"]) {                //     this.facadeCAV = response.headers["ETag"];                // }                if (response !== undefined && response.headers !== undefined && response.headers["set-cookie"]) {                    this.getSetCookies(response.headers["set-cookie"])                        .then((res) => {                            resolve([error, response, data]);                        });                } else {                    resolve([error, response, data]);                }            });        });    }    reqGetPost(...args) {        let [url, Referer, cookie] = args;        monitorActivityClass.setIntervalActivity();        writeLog("reqGetPost: " + url);        return new Promise((resolve, reject) => {            let options = {                "uri": url,                "family": 4,                "method": "POST",                "timeout": 40000,                "headers": {                    "Connection": "keep-alive",                    'upgrade-insecure-requests': "1",                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36'                }            }            if (cookie !== null) {                options.headers.Cookie = cookie;            }            if (Referer !== null) {                options.headers.Referer = Referer;            }            senderReq.sendersServer(options, (error, response, data) => {                // if (!error && response && response.headers["ETag"]) {                //     this.facadeCAV = response.headers["ETag"];                // }                if (response !== undefined && response.headers !== undefined && response.headers["set-cookie"]) {                    this.getSetCookies(response.headers["set-cookie"])                        .then((res) => {                            resolve([error, response, data]);                        });                } else {                    resolve([error, response, data]);                }            });        });    }    getSetCookies(cookie) {        return new Promise((resolve, reject) => {            try {                var cookSplit = this.cookies.split(";");                var i, len = cookie.length;                if (len) {                    for (i = 0; i < len; i++) {                        var v = cookie[i];                        var name = v.split(";")[0].split("=")[0].replace(/\s/g, "");                        var val = v.split(";")[0].split("=")[1].replace(/\s/g, "");                        var exist = 0;                        var i1, len1 = cookSplit.length;                        for (i1 = 0; i1 < len1; i1++) {                            var v1 = cookSplit[i1];                            if (v1 !== "") {                                var nameExist = v1.split("=")[0].replace(/\s/g, "");                                var valExist = v1.split("=")[1].replace(/\s/g, "");                                if (nameExist === name) {                                    exist = 1;                                    if (val !== valExist) {                                        cookSplit[i1] = v.split(";")[0] + ";"                                    }                                }                            }                        }                        if (exist === 0) {                            cookSplit.unshift(cookie[i].split(";")[0])                        }                        if (len === i + 1) {                            //console.log(cookSplit);                            this.cookies = cookSplit.join(";");                            resolve(true);                        }                    }                } else {                    resolve(true);                }            } catch (e) {            }        });    }    sendSlikaCtrl() {        writeLog("sendSlikaCtrl");        all.banks.core.services.slikaAccount(this.arr)            .then((arr) => {                this.logOut();            })            .fail((error, resErr) => {                if (error === 'discard') {                    this.sendSlikaCtrl();                }            });    }    async login() {        try {            writeLog("login");            const [error1, response1, data1] = await this.reqGet(                "https://meshulam.co.il/business/login",                "https://meshulam.co.il/business/login"            );            let [error, response, data] = await this.reqPost(                "https://meshulam.co.il/api/web_business/1.0/loginUser",                "https://meshulam.co.il/business/login",                this.cookies,                {                    license_number: all.banks.accountDetails.bank.username,                    password: all.banks.accountDetails.bank.password                }            );            if (data) {                try {                    data = JSON.parse(data)                    console.log('loginUser: ', data)                    if (response && response.statusCode === 200 && data) {                        const data_res = data;                        if (data.err !== "" && data.data === "") {                            if (data.err.message.includes('שגויים')) {                                writeLog(data.err.message);                                myEmitterLogs(5);                                return false;                            }                            myEmitterLogs(5);                            return false;                        } else {                            this.slikaAccount = data_res.data.user_private_detailsArr.license_number.value;                            this.business_title = this.slikaAccount + ' ' + data_res.data.business_title;                            await this.reqGet(                                "https://meshulam.co.il/business",                                "https://meshulam.co.il/business/login",                                this.cookies                            );                            if (all.banks.openBankPage) {                                var cookSplit = this.cookies.split(";");                                var i1, len1 = cookSplit.length;                                for (i1 = 0; i1 < len1; i1++) {                                    var v1 = cookSplit[i1];                                    if (v1 !== "") {                                        var nameExist = v1.split("=")[0].replace(/\s/g, "");                                        var valExist = v1.split("=")[1].replace(/\s/g, "");                                        win.cookies.set({                                            url: 'https://meshulam.co.il',                                            name: nameExist,                                            domain: '.meshulam.co.il',                                            value: valExist                                        })                                    }                                }                                setTimeout(() => all.banks.core.services.openBankPage('https://meshulam.co.il/business'),                                    1000);                                return;                            } else {                                this.loadData();                            }                        }                        // if (data.returnCode === 14) {                        //     myEmitterLogs(6);                        //     writeLog("Password expired.");                        //     return false;                        // }                        // if (data.returnCode === 15) {                        //     myEmitterLogs(7);                        //     writeLog("Your password is going to expire.");                        //     return false;                        // }//				const rid = response.headers.location;//				if (rid.includes('PasswordExpired.aspx')) {//					myEmitterLogs(6);//					writeLog("Password expired.");//					return false;//				}//				if (rid.includes('LoginAgreement.aspx')) {//					myEmitterLogs(36);//					writeLog("Login agreement required.");//					return false;//				}                    } else {                        myEmitterLogs(5);                    }                } catch (e) {                    myEmitterLogs(5);                }            } else {                myEmitterLogs(5);            }        } catch (e) {            myEmitterLogs(9, "failed during login", e);        }    }    async loadData() {        try {            let [error, response, data] = await this.reqGetPost(                "https://meshulam.co.il/api/web_business/1.0/getUserBankTransfers/?action_type=1",                "https://meshulam.co.il/business/bank_transfers",                this.cookies            );            if (data) {                try {                    data = JSON.parse(data)                    console.log('getUserBankTransfers: ', data);                    if (response && response.statusCode === 200 && data && data.err === "" && data.data !== "") {                        if (data.data.transfersArr && data.data.transfersArr.length) {                            data.data.transfersArr.forEach((row) => {                                const cardType = 87; //all.banks.core.services.getTypeCreditCard(row.card_type);                                const payment_date = row.transfer_date.split('/');                                this.arr.push({                                    "target_idStr": all.banks.accountDetails.bank.targetId,                                    "tokenStr": all.banks.accountDetails.bank.token,                                    "bankNumber": parseInt(all.banks.accountDetails.bank.BankNumber),                                    "extractDate": new Date().getFullYear() + '' + ("0" + (new Date().getMonth() + 1)).slice(-2) + '' + ("0" + (new Date().getDate())).slice(-2) + '' + ("0" + (new Date().getHours())).slice(-2) + '' + ("0" + (new Date().getMinutes())).slice(-2),                                    "ExporterId": all.banks.spiderConfig.spiderId,                                    "solek_desc": this.business_title,                                    "slikaAccount": this.slikaAccount,                                    "valueDate": payment_date[0] + '/' + payment_date[1] + '/20' + payment_date[2],                                    "grandTotal": 0,                                    "regularPaymentsTotal": row.sum.replace(/[^\d\.-]/g, ""),                                    "nextTotal": row.sum.replace(/[^\d\.-]/g, ""),                                    "paymentsTotal": 0,                                    "cardType": cardType,                                    "branchNumber":row.branch_code,                                    "accountNumber": row.account                                });                            })                        }                    }                } catch (e) {                    console.log(e)                }            }        } catch (ex) {            myEmitterLogs(9, ex);            this.logOut(false);            return false;        }        if (this.arr.length) {            writeLog('Finished to run and start to send data');            // console.log(this.arr)            this.sendSlikaCtrl();        } else {            this.logOut(true);        }    }    async logOut(reportStatus = true) {        writeLog("logOut");        await this.reqPost(            "https://meshulam.co.il/api/web_business/1.0/logout",            "https://meshulam.co.il/business",            this.cookies        );        writeLog("killVpn");        monitorVpn.killVpn(() => {            if (reportStatus) {                myEmitterLogs(25);            }        });    }}all.banks.accounts.meshulam = new meshulam();